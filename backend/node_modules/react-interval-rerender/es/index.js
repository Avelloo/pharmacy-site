"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Interval extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_intervalID", null);
  }

  _stop() {
    if (this._intervalID != null) {
      clearInterval(this._intervalID);
      this._intervalID = null;
    }
  }

  _start(delay) {
    if (delay != null && Number.isFinite(delay)) {
      this._intervalID = setInterval(() => this.forceUpdate(), delay);
    }
  }

  componentDidMount() {
    this._start(this.props.delay);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.delay !== this.props.delay) {
      this._stop();

      this._start(this.props.delay);
    }
  }

  componentWillUnmount() {
    this._stop();
  }

  render() {
    const {
      render,
      children
    } = this.props;
    if (children) return normalizeNull(children());
    if (render) return normalizeNull(render());
    return null;
  }

}

exports.default = Interval;

function normalizeNull(value) {
  if (value == null) return null;
  return value;
}